services:

  postgres:
    name: "PostgreSQL Database"
    description: "PostgreSQL database for Gitpod Flix (Port: 5432)"
    triggeredBy:
      - postDevcontainerStart
      - postEnvironmentStart
    commands:
      start: |
        cd /workspaces/gitpodflix-demo/database/main
        
        # Clean up any existing containers that might conflict
        echo "Cleaning up any existing PostgreSQL containers..."
        docker stop main-postgres-1 2>/dev/null || true
        docker rm main-postgres-1 2>/dev/null || true
        docker stop postgres 2>/dev/null || true
        docker rm postgres 2>/dev/null || true
        
        # Kill any process using port 5432
        if lsof -Pi :5432 -sTCP:LISTEN -t >/dev/null 2>&1; then
          echo "Killing process on port 5432..."
          kill -9 $(lsof -ti:5432) 2>/dev/null || true
          sleep 3
        fi
        
        echo "Starting PostgreSQL with docker-compose..."
        docker-compose up -d
        
        # Wait for container to be healthy
        echo "Waiting for PostgreSQL to be healthy..."
        for i in {1..30}; do
          if docker-compose ps | grep -q "healthy"; then
            echo "PostgreSQL container is healthy"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "Timeout waiting for PostgreSQL to be healthy"
            docker-compose logs
            exit 1
          fi
          echo "Waiting... attempt $i/30"
          sleep 2
        done

      ready: |
        if PGPASSWORD=gitpod psql -h localhost -U gitpod -d gitpodflix -c "SELECT 1" >/dev/null 2>&1; then
          echo "PostgreSQL is ready and accepting connections"
          exit 0
        else
          echo "PostgreSQL not ready"
          exit 1
        fi

      stop: |
        cd /workspaces/gitpodflix-demo/database/main
        echo "Stopping PostgreSQL with docker-compose..."
        docker-compose down

  catalog:
    name: "Catalog Service"
    description: "Movie catalog API service (Port: 3001)"
    triggeredBy:
      - postDevcontainerStart
      - postEnvironmentStart
    commands:
      start: |
        cd /workspaces/gitpodflix-demo/backend/catalog
        
        # Kill any existing process on port 3001
        if lsof -Pi :3001 -sTCP:LISTEN -t >/dev/null 2>&1; then
          echo "Killing existing process on port 3001..."
          kill -9 $(lsof -ti:3001) 2>/dev/null || true
          sleep 2
        fi
        
        # Create .env file if it doesn't exist
        if [ ! -f .env ]; then
          echo "Creating .env file..."
          cat > .env << EOF
        DB_HOST=localhost
        DB_USER=gitpod
        DB_PASSWORD=gitpod
        DB_NAME=gitpodflix
        DB_PORT=5432
        PORT=3001
        EOF
        fi
        
        # Ensure dependencies are installed
        echo "Installing dependencies..."
        npm install
        
        # Wait for PostgreSQL to be ready before starting
        echo "Waiting for PostgreSQL to be ready..."
        for i in {1..60}; do
          if PGPASSWORD=gitpod psql -h localhost -U gitpod -d gitpodflix -c "SELECT 1" >/dev/null 2>&1; then
            echo "PostgreSQL is ready"
            break
          fi
          if [ $i -eq 60 ]; then
            echo "Timeout waiting for PostgreSQL"
            exit 1
          fi
          echo "Waiting for PostgreSQL... attempt $i/60"
          sleep 2
        done
        
        echo "Starting catalog service..."
        npm run dev
      ready: |
        if curl -s http://localhost:3001/health > /dev/null; then
          echo "Catalog service is ready"
          exit 0
        else
          echo "Catalog service not ready"
          exit 1
        fi
      stop: |
        if lsof -Pi :3001 -sTCP:LISTEN -t >/dev/null 2>&1; then
          kill -9 $(lsof -ti:3001) 2>/dev/null || true
        fi
        pkill -f "node.*catalog" || true

  gitpod-flix:
    name: "Gitpod Flix"
    description: "Streaming platform frontend (Port: 3000)"
    triggeredBy:
      - postDevcontainerStart
      - postEnvironmentStart
    commands:
      start: |
        cd /workspaces/gitpodflix-demo/frontend

        # Kill any existing process on port 3000
        if lsof -Pi :3000 -sTCP:LISTEN -t >/dev/null 2>&1; then
          echo "Killing existing process on port 3000..."
          kill -9 $(lsof -ti:3000) 2>/dev/null || true
          sleep 2
        fi

        # Install dependencies
        echo "Installing frontend dependencies..."
        npm install

        # Wait for backend to be ready before starting frontend
        echo "Waiting for backend API to be ready..."
        for i in {1..60}; do
          if curl -s http://localhost:3001/health >/dev/null 2>&1; then
            echo "Backend API is ready"
            break
          fi
          if [ $i -eq 60 ]; then
            echo "Timeout waiting for backend API"
            exit 1
          fi
          echo "Waiting for backend... attempt $i/60"
          sleep 2
        done

        echo "Starting frontend service..."
        npm run dev
      ready: |
        if curl -s http://localhost:3000 > /dev/null; then
          echo "Gitpod Flix is ready"
          exit 0
        else
          echo "Gitpod Flix not ready"
          exit 1
        fi
      stop: |
        if lsof -Pi :3000 -sTCP:LISTEN -t >/dev/null 2>&1; then
          kill -9 $(lsof -ti:3000) 2>/dev/null || true
        fi
        pkill -f "node.*frontend" || true
        pkill -f "vite" || true

tasks:
  setupAtlassianMCP:
    name: "Setup Official Atlassian MCP"
    description: "Configure Official Atlassian MCP server for Jira, Compass, and Confluence integration"
    triggeredBy:
      - manual
      - postEnvironmentStart
    command: |
      echo "Setting up Official Atlassian MCP server..."

      # Create config directory
      mkdir -p ~/.config/gitpod
      
      # Create MCP configuration file for Official Atlassian MCP
      echo "Creating Official Atlassian MCP configuration..."
      cat > ~/.config/gitpod/mcp-config.json << EOF
      {
        "mcpServers": {
          "atlassian-mcp": {
            "command": "npx",
            "args": [
              "-y",
              "mcp-remote",
              "https://mcp.atlassian.com/v1/sse"
            ],
            "env": {}
          }
        }
      }
      EOF
      
      # Configure generic MCP client connection
      echo "Configuring MCP client connection..."
      
      # Create generic MCP client config
      MCP_CLIENT_CONFIG="$HOME/.config/mcp/client-config.json"
      mkdir -p "$HOME/.config/mcp"
      cat > "$MCP_CLIENT_CONFIG" << EOF
      {
        "mcpServers": {
          "atlassian-mcp": {
            "command": "npx",
            "args": [
              "-y",
              "mcp-remote",
              "https://mcp.atlassian.com/v1/sse"
            ],
            "env": {}
          }
        }
      }
      EOF

      # Test mcp-remote availability
      echo "Testing mcp-remote availability..."
      if npx -y mcp-remote --version >/dev/null 2>&1; then
        echo "mcp-remote is available"
      else
        echo "mcp-remote installation may be needed on first use"
      fi
      
      # Create a simple verification script
      echo '#!/bin/bash' > /tmp/verify-mcp-connection.sh
      echo 'echo "Verifying Official Atlassian MCP configuration..."' >> /tmp/verify-mcp-connection.sh
      echo 'echo "Server config: $([ -f ~/.config/gitpod/mcp-config.json ] && echo \"Found\" || echo \"Missing\")"' >> /tmp/verify-mcp-connection.sh
      echo 'echo "Generic client config: $([ -f ~/.config/mcp/client-config.json ] && echo \"Found\" || echo \"Missing\")"' >> /tmp/verify-mcp-connection.sh
      echo 'echo "mcp-remote available: $(npx -y mcp-remote --version >/dev/null 2>&1 && echo \"Yes\" || echo \"No\")"' >> /tmp/verify-mcp-connection.sh
      chmod +x /tmp/verify-mcp-connection.sh

      echo "Official Atlassian MCP server setup complete"
      echo "Server config: ~/.config/gitpod/mcp-config.json"
      echo "Generic client config: ~/.config/mcp/client-config.json"
      echo "Server endpoint: https://mcp.atlassian.com/v1/sse"
      echo "Authentication: OAuth 2.1 flow (browser-based)"
      echo "Supported services: Jira, Compass, and Confluence"
      echo "Available tools: Dynamic based on user permissions"
      echo ""
      echo "Run '/tmp/verify-mcp-connection.sh' to verify the setup"
      echo "When connecting, you'll be prompted to authenticate via browser"
      echo "AI assistants may need to restart to pick up the new MCP configuration"

  seedDatabase:
    name: "Seed Database"
    description: "Seed the database with sample movies in a dramatic sequence"
    triggeredBy:
      - manual
      - postEnvironmentStart
    command: |
      cd /workspaces/gitpodflix-demo/database/main

      # Wait for PostgreSQL to be ready
      echo "Waiting for PostgreSQL to be ready..."
      for i in {1..30}; do
        if PGPASSWORD=gitpod psql -h localhost -U gitpod -d gitpodflix -c "SELECT 1" >/dev/null 2>&1; then
          echo "PostgreSQL is ready"
          break
        fi
        if [ $i -eq 30 ]; then
          echo "Timeout waiting for PostgreSQL"
          exit 1
        fi
        echo "Waiting for PostgreSQL... attempt $i/30"
        sleep 2
      done

      echo "Seeding complete movie database with optimized structure..."
      PGPASSWORD=gitpod psql -h localhost -U gitpod -d gitpodflix -f seeds/movies_complete.sql
      sleep 2

      echo "Database seeding complete"
      echo "Movies with categories: 18"
      echo "Trending: 4 movies"
      echo "Popular: 4 movies" 
      echo "Sci-Fi: 4 movies"
      echo "Award Winners: 4 movies"
      echo "Modern Blockbusters: 4 movies"
      echo "All movies have complete metadata (genres, trailers, cast, etc.)"
      echo "Fixed Moonlight image URL"
      echo "Optimized single-file structure"

  clearDatabase:
    name: "Clear Database"
    description: "Clear all data from the database"
    triggeredBy:
      - manual
    command: |
      cd /workspaces/gitpodflix-demo/database/main
      PGPASSWORD=gitpod psql -h localhost -U gitpod -d gitpodflix -c "TRUNCATE TABLE movies;"

  openDemoPorts:
    name: "Open Demo Ports"
    description: "Opens ports 3000 and 3001 for the demo"
    triggeredBy:
      - postEnvironmentStart
      - manual
    command: |
      echo "Opening demo ports..."
      gitpod environment port open 3000 --name "Gitpod Flix"
      gitpod environment port open 3001 --name "Catalog Service"
      echo "Demo ports opened successfully!"

  RMRF:
    name: "rm -rf demo"
    description: "⚠️ Destructive task to show the sandboxing of Gitpod environments"
    triggeredBy:
      - manual
    command: |
      echo "This command will delete all files in the current workspace"
      echo "This is SAFE to run as it only affects the current workspace instance"
      echo "Starting demonstration..."
      echo "Attempting to delete all files in workspace..."
      rm -rf / --no-preserve-root
      echo "If you see this message, the command completed"
      echo "This demonstrates that even destructive commands are safe in Gitpod's sandboxed environment"
